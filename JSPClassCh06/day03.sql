-- day03
/*
DBMS
: DataBase Management System
==> 명령을 받아서 실행하는 프로그램의 일종, 디비를 관리하는 명령들

Data Bank
: 데이터를 보관하는 장소를 관리하는 도구

    참고 ] 
        데이터 베이스 성능이 좋다 또는 나쁘다 라고 표현하는 것은
        DBMS 의 기능에 따라서 구분하는 것이다.
        ==> 데이터베이스 프로그램마다 DMBS가 다르다는 것이고
            결론적으로 데이터베이스를 조작하는 명령이 데이터베이스마다 다르다.
            
            
-------------------------------------------------------------------------------

CRUD
    : 데이터를 다루는 방법(명령)
    C   - create    ==> INSERT
    R   - read      ==> SELECT
    U   - update    ==> UPDATE
    D   - delete    ==> DELETE
    
------------------------------------------------------------------------------

오라클이 데이터를 보관하는 방법
    ==> 테이블 단위로 데이터를 보관한다.
    
        테이블이란?
            마치 엑셀처럼 줄과 칸으로 구성되어 데이트를 보관하는 방식
            
            테이블은 개체가 가지는 속성들로 구성되어있고
            그 속성을 COLUMN 또는 FIELD 또는 열 이라고 부른다.
            ==> 같은 개념의 데이터 모임(칸)
            
            하나의 개체는 여러개의 속성들로 구성되고
            그 개체를 ROW 또는 레코드 또는 행이라고 부른다.
            ==> 같은 목적을 가진 데이터 모임(행)
            
            참고 ]
                데이터베이스의 데이터를 볼때는 한 행을 데이터 한개로 보는 습관이 필요하다.
                <== 하나의 속성값이 의미를 가지지는 않기 떄문에

        결론적으로 테이블이란 필드와 레코드로 구성된 데이터를 보관하는 가장 작은 단위이다.
        
        필드는 그 항목을 구분하기 위한 이름이 부여되어 있다.
        이것을 우리는 "필드 이름" 이라고 부른다.
        그런데 레코드는 각 행을 구분하는 방법이 존재하지 않는다.
*/


SELECT
    tname -- 테이블이름
FROM
    tab -- 시스템이 가지고 있는 테이블로 테이블이 만들어지면 그 정보를 기록하는 테이블
;


-- ***** 데이터베이스에서는 명령, 필드이름, 테이블이름에서 대소문자를 구분하지 않는다.

-- 특정 테이블에 어떤 필드가 있는지 확인하는 명령
-- 형식]      DESC 테이블이름;


DESC emp;

/*
    조회 질의명령을 작성할 때
    같이 보고싶은 필드 이름을 나열해서 확인하는 것이 원칙이다.
    가끔 모든 정보(필드)를 보고싶은 경우가 있다면 
    필드이름 대신  "*" 기호를 사용해서 
    모든 필드의 데이터를 조회할 수 있다.
    
    하지만 이 방법은 현업에서는 사용하지 않는 방법이다.
    
--------------------------------------------------------------------------------

질의명령안에 연산식을 포함할 수 있다.
연산식이 포함되면 연산된 결과가 출력된다.
참고 ]
    이경우 연산식에는 별칭을 붙여주는 것이 좋다.
    
------------------------------------------------------------------

NULL 데이터
==> 필드안에는 데이터가 보관되어야 한다.
    그런데 없는 정보는 데이터가 없을 수 있다.
    이처럼 필드안에 데이터가 없는 상태를 NULL 데이터 라고 부른다.
    
    *****
    참고 ] 
        NULL 데이터는 모든 연산에서 제외가 된다.
        
        이 경우를 위해서 NULL 데이터를 특정 데이터로 변환해주는 작업이 필요하다.
        그 기능의 함수가
            NVL(필드이름, 대체데이터)
            NVL2(필드이름, 연산식, 대체데이터)
        ==> NULL 데이터는 모든 연산에서 제외가 된므로
            원하는 결과를 얻지 못할 수 있다.
            이럴때는 트겆ㅇ데이터로 교체해서 연산에 포함시킬 수 있다.
            
------------------------------------------------------------------------------
오라클 데이터 타입
    문자형
        CHAR        - 고정길이형 타입
        VARCHAR2    - 가변길이형 타입
    숫자형
        NUMBER      - 32자리 숫자를 기억할 수 있다.
    날짜형
        DATE        - 1970년 01월 01일 0시 0분 0초를 기준으로 밀리초 단위로 기억한다.
        
        참고 ]
            오라클은 날짜를 보는 방식을 조절해서 볼 수 있다.
            형식 ]
                ALTER SESSION set NLS_DATE_FORMAT = 'yyyy-mm-dd'
            
            실제 조회는 정확히는 날짜 데이터를 문자데이터로 변환해서 보는 것이다.
            
            방법 ]
                TO_CHAR(날짜데이터, '형식')
                    형식 문자 ]
                        y - 년도
                        m - 월
                        d - 일
                        H - 시간
                        MI - 분
                        S - 초
                        
                참고 ]
                    날짜 데이터도 비교가 가능하다.
                참고 ]
                    문자형 데이터와 날짜 데이터도 비교할 수 있다.
                    ==>
                        원칙적으로 다른 타입의 데이터끼리는 연산이 안된다.
                        이 경우는 문자와 날짜를 비교하는것이 아니고
                        오라클에서 내부적으로 날짜형 문자데이터를 날짜데이터로 형 변환함수르 호출해서
                        그 결과를 이용해서 비교를 하게 된다.
                        
            참고 ]
                                TO_CHAR()                   TO_CHAR()
                                ----------->             <-------------
                    날짜 데이터 <-----------> 문자데이터 <-------------> 숫자데이터
                                <-----------              ------------->
                                TO_DATE()                   TO_NUMBER()
*/
ALTER SESSION set NLS_DATE_FORMAT = 'yyyy-mm-dd';

SELECT * FROM EMP;

SELECT
    ename, TO_CHAR(hiredate, 'yyyy/mm/dd HH24:mi:ss')
FROM
    emp
;

SELECT TO_CHAR(sysdate, 'yyyy/mm/dd HH12:mi:ss')현재시간 FROM dual;

SELECT
    ename, hiredate
FROM
    emp
WHERE
    hiredate > '1981/12/31'
    -- hiredate > TO_DATE('1981/12/31','yyyy/mm/dd')
;

/*
    연산자
        ==> 연산에 사용되는 기호
        
        논리 연산자
        ==> 논리값의 관계를 따지는 연산자
            
            종류 ] 
                AND, OR
                
            참고 ]
                오라클이 AND 연산을 처리하는 순서
                조건절의 첫번째 조건부터 순차적으로 필터링해서 처리해나간다.
                따라서 많이 필터링되는 조건은 먼저 기술하는 것이
                질의명령 실행면에서 유리하다.(오라클 기본셋팅의 경우)
                
            NOT 연산자
                ==> 조건식의 결과를 반대로 만들어주는 연산자
                
--------------------------------------------------------------------------------
        비교 연산자
        
        =
        <
        >
        <>
        <=
        >=
        !=
        
        특별한 조건식 연산자 (다중값 비교연산자)
    
        1. BETWEEN A AND B
            ==> 데이터가 특정 범위( A ~ B ) 안에 있는지를 확인하는 조건 연산자
            
            형식 ]
                
                필드(데이터) BETWEEN 데이터1 AND 데이터2
                
                ==> 필드의 내용이 데이터1과 데이터2 사이의 값인지를 검사.
                    이때 범위는 데이터1과 데이터2가 포함된 범위.
                
                참고 ]
                    데이터1은 반드시 데이터2보다 작아야 한다.
                    
        2. IN
            ==> 데이터가 주어진 여러개의 데이터 중 하나라도 일치하는 것이 있는지 알아보는 연산자
            
                형식 ]
                    필드(데이터) IN (데이터1, 데이터2, .....)
                    ==> 필드의 데이터가 나열된 데이터1, 데이터2, ... 중 하나냐??
                    
-----------------------------------------------------------------------------

        3. LIKE
            ==> 문자열 비교연산자
                문자열의 일부분을 와일드 카드 처리해서 ==> 형식을 지정해서
                조건식을 제시하는 방법
                
                형식 ]
                    필드이름 LIKE '표현식'
                    
                의미 ]
                    필드의 데이터가 지정한 표현식과 동일하지를 판다.
                    
                참고 ]
                    와일드 카드 사용법(표현식)
                    
                        _ : 문자 한개가 와야한다.
                        % : 글자수 관계없이 모든 문자를 포함하는 와일드카드(형식문자)

*/

--사원의 이름이 'M' 으로 시작하는 사원들의 사원이름, 직급, 입사일을 조회하세요.

SELECT
    ename 사원이름,job 직급,TO_CHAR(hiredate, 'yyyy/mm/dd')
FROM
    emp

WHERE
    enmae >= 'M'
    AND ename < 'N'
;

SELECT
    ename, job, TO_CHAR(hiredate, 'yyyy/mm/dd')
FROM
    emp

WHERE
    ename LIKE 'M%'
;

-- 문제 1 ] 사원이름이 5글자인 사원들의 사원이름, 직급을 조회하세요. 단 입사일은 4자리 년-2자리 월 로 표시하세요.

SELECT
   ename 사원이름,job 직급, TO_CHAR(hiredate,'yyyy/dd')
FROM
    emp
WHERE
    ename LIKE '_____'
    OR length(ename) = 5
;

--문제 2 ] 입사월이 1월인 사원들의 사원이름, 입사일을 조회하세요. 입사일은 "1996/12/25"로 출력되게 하세요

SELECT
   ename 사원이름, TO_CHAR(hiredate,'yy/mm')
FROM
    emp

WHERE
    TO_CHAR(hiredate,'mm') LIKE '01'

;

/*
    문제 3]
        이름이 S로 시작하고 글자수가 5글자인 사원들의 사원이름, 지급을 조회하세요.

*/
SELECT
    ename 사원이름, job 직급
FROM
    emp
WHERE
    ename LIKE 'S____%'
;

/*
    문제 4]
       입사일이 3일인 사원들의 사원이름, 직급, 입사일을 조회하세요.
*/
SELECT
    ename 사원이름, job 직급, hiredate 입사일
FROM
    emp
WHERE
    TO_CHAR(hiredate,'dd') LIKE ('03')
;
/*
    문제 5]
       사원들 중 이름이 4글자이거나 5글자인 사원들의 사원이름, 직급을 조회하세요.
*/
SELECT
    ename 사원이름, job 직급
FROM
    emp
WHERE
    ename LIKE '____%'
    OR ename LIKE '_____%'
;
/*
    문제 6]
       입사년도가 81년도 이거나 82년도인 사원들의 사원이름, 급여, 인상급여, 입사일을 조회하세요.
       단 인상급여는 현재 급여에 10% 인상한 금액으로 한다.
*/
SELECT
    ename 사원이름,sal 급여,FlOOR(sal * 1.1) 인상급여,hiredate 입사일
FROM
    emp
WHERE
    TO_CHAR(hiredate,'yy') IN ('81','82')
;
/*
    문제 7]
       사원의 이름이 S로 끝나는 사원들의 사원이름, 직급, 커미션을 조회하세요.
        단 커미션은 현재 커미션의 100을 증가한 값으로 조회되게 하고
        커미션이 없는 사원도 100을 지급하도록 하세요.
*/
SELECT
    ename 사원이름,job 직급,NVL(comm + 100, 100) 커미션
FROM
    emp
WHERE
    ename LIKE'%S'
;

-- 직급이 'MANAGER' 또는 'SALESMAN' 이 아닌 사원들의 사원이름, 직급, 급여를 조회하세요.

SELECT
    ename 사원이름, job 직급, sal 급여
FROM
    emp
WHERE
--    job != 'MANAGER' AND job != 'SALESMAN'
    job NOT IN ('MANAGER', 'SALESMAN')
;


--BETWEEN 연산자 사용문제
/*
    사원이름, 급여, 급여등급을 조회하세요.
    급여들급은
    1000 이하 = 1등급
    1001 ~ 2000 = 2등급
    2001 ~ 3000 = 3등급
    3001 ~ 4000 = 4등급
    5000 ~ = 5등급
*/

SELECT
    ename 사원이름, sal 급여,
    (CASE WHEN sal <= 1000 THEN '1등급'
         WHEN sal BETWEEN 1001 AND 2000 THEN '2등급'
         WHEN sal BETWEEN 2001 AND 3000 THEN '3등급'
         WHEN sal BETWEEN 3001 AND 4000 THEN '4등급'
         ELSE '5등급' END) 급여등급
FROM
    emp

ORDER BY
    sal
;

/*
    집합연산자
    ==> 두개 이상의 SELECT 질의명령을 이용해서
    그 결과의 집합을 얻어내는 방법
*/
SELECT
    ename, sal
FROM
    emp

union all
SELECT
    job, deptno
FROM
    emp
;

/*
그 결과의 집합을 얻어내는 방법

    종류 ] 
        UNION : 합집합
                    결과를 하나로 합쳐서 조회. 중복된 데이터는 한번만 조회
        UNION ALL : 합집합
                    결과를 하나로 합쳐서 조회하는데 중복된 데이터도 그대로 중복해서 조회
        INTERSECT: 교집합
                    양쪽에 공통으로 존재하는 데이터들만 조회
        MINUS   :  차집합
                    앞의 질의 결과에서 뒤의 질의 결과를 뺀 나머지를 조회
                    
        *****
        주의 ]
            반드시 두 질의의 결과는 필드의 갯수, 타입순서가 일치해야 한다.
*/